{
	"info": {
		"_postman_id": "e7898b60-fa93-4753-aaa8-0568f358493b",
		"name": "Flickr-Methods-Urls (all)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "flickr.urls.getGroup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"The url to a group's page returns\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.getGroup&group_id=650402@N24",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.getGroup",
							"description": "Returns the url to a group's page."
						},
						{
							"key": "group_id",
							"value": "650402@N24",
							"description": "(Required) The NSID of the group to fetch the url for. - Bulgarian landscapes"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.urls.getUserPhotos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"The url to a user's photos returns\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.getUserPhotos&user_id",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.getUserPhotos",
							"description": "Returns the url to a user's photos."
						},
						{
							"key": "user_id",
							"value": null,
							"description": "(Optional) The NSID of the user to fetch the url for. If omitted, the calling user is assumed."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.urls.getUserProfile",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Returns the url to a user's profile\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.getUserProfile&user_id=",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.getUserProfile",
							"description": "Returns the url to a user's profile."
						},
						{
							"key": "user_id",
							"value": "",
							"description": "(Optional) The NSID of the user to fetch the url for. If omitted, the calling user is assumed."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.urls.lookupGallery",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Returns gallery info, by url\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.lookupGallery&url=https://www.flickr.com/photos/alexander_burakov/galleries/72157712757306273/",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.lookupGallery",
							"description": "Returns gallery info, by url."
						},
						{
							"key": "url",
							"value": "https://www.flickr.com/photos/alexander_burakov/galleries/72157712757306273/",
							"description": "(Required) The gallery's URL."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.urls.lookupGroup",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Returns a group NSID, given the url to a group's page or photo pool\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.lookupGroup&url=https://www.flickr.com/groups/bulgarian_landscapes/",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.lookupGroup",
							"description": "Returns a group NSID, given the url to a group's page or photo pool."
						},
						{
							"key": "url",
							"value": "https://www.flickr.com/groups/bulgarian_landscapes/",
							"description": "The url to the group's page or photo pool. - Bulgarian landscapes"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.urls.lookupUser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Returns a user NSID, given the url to a user's photos or profile\"]=true; break;\r",
							"        case \"fail\": tests[\"ErrorCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=true; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.urls.lookupUser&url=https://www.flickr.com/photos/olegsokol/51174656512/in/feed-1939356-1620869412-1-72157719166246181",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.urls.lookupUser",
							"description": "Returns a user NSID, given the url to a user's photos or profile."
						},
						{
							"key": "url",
							"value": "https://www.flickr.com/photos/olegsokol/51174656512/in/feed-1939356-1620869412-1-72157719166246181",
							"description": "(Required) The url to the user's profile or photos page."
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth1",
		"oauth1": [
			{
				"key": "verifier",
				"value": "{{oauth_verifier}}",
				"type": "string"
			},
			{
				"key": "callback",
				"value": "{{oauth_callback}}",
				"type": "string"
			},
			{
				"key": "tokenSecret",
				"value": "{{oauth_token_secret}}",
				"type": "string"
			},
			{
				"key": "token",
				"value": "{{oauth_token}}",
				"type": "string"
			},
			{
				"key": "consumerSecret",
				"value": "{{consumerSecret}}",
				"type": "string"
			},
			{
				"key": "consumerKey",
				"value": "{{consumerKey}}",
				"type": "string"
			},
			{
				"key": "addParamsToHeader",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "signatureMethod",
				"value": "HMAC-SHA1",
				"type": "string"
			},
			{
				"key": "version",
				"value": "1.0",
				"type": "string"
			},
			{
				"key": "addEmptyParamsToSign",
				"value": false,
				"type": "boolean"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}