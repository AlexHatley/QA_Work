{
	"info": {
		"_postman_id": "849d0747-e8e0-4cad-9908-77ab5b4a6f4a",
		"name": "Flickr-Methods-Photos.comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "flickr.photos.comments.addComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Comment is added and my_comment_id saved in the Environment!\"]=true; \r",
							"            //comment_id saved in the Environment\r",
							"            pm.environment.set(\"my_comment_id\", jsonData.comment.id);        \r",
							"            break;\r",
							"        case \"fail\": tests[\"FailCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=false; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": true,
				"followRedirects": true,
				"disableCookies": false,
				"disableUrlEncoding": false,
				"tlsPreferServerCiphers": false,
				"maxRedirects": 10
			},
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "includeBodyHash",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "timestamp",
							"value": "",
							"type": "string"
						},
						{
							"key": "nonce",
							"value": "",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.photos.comments.addComment&photo_id={{photo_id}}&comment_text={{comment_text}}",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.photos.comments.addComment",
							"description": "Add comment to a photo as the currently authenticated user"
						},
						{
							"key": "photo_id",
							"value": "{{photo_id}}",
							"description": "(Required) The id of the photo to add a comment to."
						},
						{
							"key": "comment_text",
							"value": "{{comment_text}}",
							"description": "(Required) Text of the comment. PUT HERE! Do not into the Environment!!!!!"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.photos.comments.editComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Comment updated!\"]=true; break;\r",
							"        case \"fail\": tests[\"FailCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=false; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "includeBodyHash",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.photos.comments.editComment&comment_id={{my_comment_id}}&comment_text={{comment_text_new}}",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.photos.comments.editComment",
							"description": "Edit the text of a comment as the currently authenticated user."
						},
						{
							"key": "comment_id",
							"value": "{{my_comment_id}}",
							"description": "(Required) The id of the comment to edit."
						},
						{
							"key": "comment_text",
							"value": "{{comment_text_new}}",
							"description": "(Required) Update the comment to this text."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.photos.comments.deleteComment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Comment deleted!\"]=true; break;\r",
							"        case \"fail\": tests[\"FailCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=false; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": true
			},
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.photos.comments.deleteComment&comment_id={{my_comment_id}}",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.photos.comments.deleteComment",
							"description": "Delete a comment as the currently authenticated user."
						},
						{
							"key": "comment_id",
							"value": "{{my_comment_id}}",
							"description": "(Required) The id of the comment to delete."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "flickr.photos.comments.getList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"Comments list is ready!\"]=true; break;\r",
							"        case \"fail\": tests[\"FailCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=false; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//convert UTC date to Timestamp \r",
							"pm.environment.set(\"unix_min_comment_date\", \"\"+Date.parse(pm.environment.get(\"utc_min_comment_date\"))/1000);\r",
							"pm.environment.set(\"unix_max_comment_date\", \"\"+Date.parse(pm.environment.get(\"utc_max_comment_date\"))/1000);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.photos.comments.getList&photo_id={{photo_id}}&min_comment_date={{unix_min_comment_date}}&max_comment_date={{unix_max_comment_date}}",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.photos.comments.getList",
							"description": "Returns the comments for a photo"
						},
						{
							"key": "photo_id",
							"value": "{{photo_id}}",
							"description": "(Required) The id of the photo to fetch comments for."
						},
						{
							"key": "min_comment_date",
							"value": "{{unix_min_comment_date}}",
							"description": "(Optional) Minimum date that a a comment was added. The date should be in the form of a unix timestamp."
						},
						{
							"key": "max_comment_date",
							"value": "{{unix_max_comment_date}}",
							"description": "(Optional) Maximum date that a comment was added. The date should be in the form of a unix timestamp."
						}
					]
				},
				"description": "Returns the comments for a photo"
			},
			"response": []
		},
		{
			"name": "flickr.photos.comments.getRecentForContacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"    switch (jsonData.stat){\r",
							"        case \"ok\": tests[\"The list of commented photos returned!\"]=true; break;\r",
							"        case \"fail\": tests[\"FailCode=  \" + \" \" + jsonData.code +\".  \" + \" \" + jsonData.message]=false; break;\r",
							"        default: tests[\"Sory, we are out of\"]=false;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "consumerKey",
							"value": "{{consumerKey}}",
							"type": "string"
						},
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "verifier",
							"value": "{{oauth_verifier}}",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "{{consumerSecret}}",
							"type": "string"
						},
						{
							"key": "callback",
							"value": "{{oauth_callback}}",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "{{oauth_token_secret}}",
							"type": "string"
						},
						{
							"key": "token",
							"value": "{{oauth_token}}",
							"type": "string"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://www.flickr.com/services/rest?nojsoncallback=1&format=json&method=flickr.photos.comments.getRecentForContacts&date_lastcomment&extras&per_page&page",
					"protocol": "https",
					"host": [
						"www",
						"flickr",
						"com"
					],
					"path": [
						"services",
						"rest"
					],
					"query": [
						{
							"key": "nojsoncallback",
							"value": "1"
						},
						{
							"key": "format",
							"value": "json"
						},
						{
							"key": "method",
							"value": "flickr.photos.comments.getRecentForContacts"
						},
						{
							"key": "contacts_filter",
							"value": null,
							"description": "(Optional) A comma-separated list of contact NSIDs to limit the scope of the query to.",
							"disabled": true
						},
						{
							"key": "date_lastcomment",
							"value": null
						},
						{
							"key": "extras",
							"value": null
						},
						{
							"key": "per_page",
							"value": null
						},
						{
							"key": "page",
							"value": null
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth1",
		"oauth1": [
			{
				"key": "addParamsToHeader",
				"value": true,
				"type": "boolean"
			},
			{
				"key": "verifier",
				"value": "{{oauth_verifier}}",
				"type": "string"
			},
			{
				"key": "callback",
				"value": "{{oauth_callback}}",
				"type": "string"
			},
			{
				"key": "tokenSecret",
				"value": "{{oauth_token_secret}}",
				"type": "string"
			},
			{
				"key": "token",
				"value": "{{oauth_token}}",
				"type": "string"
			},
			{
				"key": "consumerSecret",
				"value": "{{consumerSecret}}",
				"type": "string"
			},
			{
				"key": "consumerKey",
				"value": "{{consumerKey}}",
				"type": "string"
			},
			{
				"key": "signatureMethod",
				"value": "HMAC-SHA1",
				"type": "string"
			},
			{
				"key": "version",
				"value": "1.0",
				"type": "string"
			},
			{
				"key": "addEmptyParamsToSign",
				"value": false,
				"type": "boolean"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}